/*  main.c  - main */

#include <xinu.h>


int i;
process test1(int number_of_process ,pid32 main_process)
{
	if(number_of_process <= 0)
	{	
		#ifdef DEBUG
			kprintf("main_process = %d\n",main_process);
		#endif
		send(main_process,OK);
		#ifdef DEBUG
			kprintf("sent!!!!\n");
		#endif
		while(1)
		{
			sleepms(500);
		}
	}

	pid32 parent_child_id = getpid();
	pid32 pid = create(test1, 1024 , 20 , "test1",2,number_of_process-1,main_process);
	kprintf("process pid %d creadted process pid %d\n",parent_child_id,pid);
	proctab[pid].user_process = TRUE;
	resume(pid);
	kprintf("\n");
	parent_child_id=pid;
	while(1)
	{
		sleepms(500);
	}
	return OK;
}

process	main(void)
{
	pid32	shpid;		/* Shell process ID */

	printf("\n\n");

	/* Create a local file system on the RAM disk */

	lfscreate(RAM0, 40, 20480);

	/* Run the Xinu shell */

	recvclr();
	resume(shpid = create(shell, 8192, 50, "shell", 1, CONSOLE));

	/* Wait for shell to exit and recreate it */
	pid32 main_process = getpid();
	#ifdef DEBUG
		kprintf("main main_process = %d\n",main_process);
	#endif
	pid32 parent_pid = create(test1,1024,20,"test1",2,15,main_process);	
	proctab[parent_pid].user_process = TRUE;
	resume(parent_pid);
	#ifdef DEBUG
		sleepms(200);
		kprintf("Bewfore receive!!!\n");
	#endif
	receive();
	#ifdef DEBUG
		kprintf("process created\n");
	#endif
	sleepms(100);		// To stop race condition by the process thread
	kill(parent_pid);

	while (TRUE) {
	    if (receive() == shpid) {
		sleepms(200);
		kprintf("\n\nMain process recreating shell\n\n");
		resume(shpid = create(shell, 4096, 20, "shell", 1, CONSOLE));
	    }
	}
	return OK;
}
